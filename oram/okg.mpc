from rdflib import Graph
from rdflib.extras.external_graph_libs import rdflib_to_networkx_multidigraph
import networkx as nx
import sys
sys.path.append("../MP-SPDZ")
from Compiler.circuit_oram import OptimalORAM
from Compiler.circuit import sha3_256

class Vertex:
    def __init__(self, _id), _n_edges:
        self.id = _id
        self.edges = OptimalORAM(_n_edges, entry_size=(256, 256))

class ObliviousGraph(Graph):

    """
    Pass in an already parsed RDF Graph as given by Graph.parse in RDFLib
    """
    def __init__(self, rdf_graph):
        self._rdf_graph = rdf_graph
        self._networkx_graph = rdflib_to_networkx_multidigraph(rdf_graph)
        self.s_labels = OptimalORAM()
        self.o_labels = OptimalORAM()
        self.p_labels = OptimalORAM()
        self.kg_oram = OptimalORAM()

        counter = 0
        for (s, p, o) in self._rdf_graph:
            self.kg_oram[hash(p)] = (hash(s), hash(p), hash(o))
            self.s_labels[counter] = hash(s)
            self.o_labels[counter] = hash(o)
            self.p_labels[counter] = hash(p) 

            counter += 1


        # Generate Oblivious Adjacency Matrix
        self._adjacency_matrix = nx.adjacency_matrix(self._networkx_graph)
        self.size_of_obj_adj_matrix = self._adjacency_matrix.shape[0]
        self.obv_adj_matrix = OptimalORAM(size=self.size_of_obj_adj_matrix)
        for i in range(self.size_of_obj_adj_matrix):
            row = self._adjacency_matrix.getrow(i).toarray().tolist()
            self.obv_adj_matrix[i] = tuple(row[0])

    def get_vertices_given_(self):
        pass

g = Graph()
g.parse("http://www.w3.org/People/Berners-Lee/card")
obv_graph = ObliviousGraph(g)