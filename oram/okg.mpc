from rdflib import Graph
from rdflib.extras.external_graph_libs import rdflib_to_networkx_multidigraph
import networkx as nx
import numpy as np
import sys
import binascii
sys.path.append("../MP-SPDZ")
from Compiler.circuit_oram import OptimalORAM
from Compiler.circuit import sha3_256

def string_to_int(string):
    reg_int = int(binascii.hexlify(string.encode("utf-8")), 16)
    return reg_int

def int_to_string(integer):
    string = binascii.unhexlify(format(integer, "x").encode("utf-8")).decode("utf-8")
    return string


class ObliviousGraph(Graph):

    """
    Pass in an already parsed RDF Graph as given by Graph.parse in RDFLib
    """
    def __init__(self, rdf_graph):
        self._rdf_graph = rdf_graph
        self._networkx_graph = rdflib_to_networkx_multidigraph(rdf_graph, edge_attrs=lambda s,p,o : {"weights": string_to_int(p)}, transform_s=string_to_int,transform_o=string_to_int)
        self._adjacency_matrix_weights = nx.to_pandas_adjacency(self._networkx_graph).values
        self.kg_oram = OptimalORAM(len(self._networkx_graph.nodes())**2)

        # Generate Oblivious Adjacency Matrix
        self._adjacency_matrix = nx.adjacency_matrix(self._networkx_graph)
        self.size_of_obj_adj_matrix = self._adjacency_matrix.shape[0]
        self.obv_adj_matrix = OptimalORAM(size=self.size_of_obj_adj_matrix)
        for i in range(self.size_of_obj_adj_matrix):
            #row = self._adjacency_matrix.getrow(i).toarray().tolist()
            self.obv_adj_matrix[i] = tuple(self._adjacency_matrix.getrow(i).toarray().tolist()[0])
            self.kg_oram[i] = tuple(self._adjacency_matrix_weights[i].astype(np.int64).tolist())

    def _get_selection_matrix(self, predicate):
        selection_matrix = OptimalORAM(self.size_of_obj_adj_matrix)
        for i in range(self.size_of_obj_adj_matrix):
            for j in range(self.size_of_obj_adj_matrix):
                if i == j:
                    selection_matrix[i][i] = predicate
                else:
                    selection_matrix[i][j] = 0
        return selection_matrix

    def _matrix_multiplication(self):
        pass

    """
    For a given predicate, get all pairs of (subject, objects) that have that predicate as their edge label
    """
    def get_all_pairs(self, predicate):
        pass

    """
    For a given set of (subject, predicate) pairs, return the object for those pairs
    """
    def get_objects(self):
        pass

    """
    For a given set of (object, predicate) pairs, return the subject for those pairs
    """
    def get_subjects(self):
        pass

g = Graph()
g.parse("http://www.w3.org/People/Berners-Lee/card")
obv_graph = ObliviousGraph(g)